#include<stdio.h>
#include<stdlib.h>

struct process {
    int arrival_time;
    int burst_time;
    int remaining_time;
    int completion_time;
    int waiting_time;
    int turnaround_time;
};

int compare_arrival_time(const void *a, const void *b) {
    return ((struct process*)a)->arrival_time - ((struct process*)b)->arrival_time;
}

int compare_remaining_time(const void *a, const void *b) {
    return ((struct process*)a)->remaining_time - ((struct process*)b)->remaining_time;
}

void SRPT(struct process p[], int n) {
    int current_time = 0;
    int completed = 0;
    int i, shortest;
    float total_waiting_time = 0, total_turnaround_time = 0;

    qsort(p, n, sizeof(struct process), compare_arrival_time);

    while (completed != n) {
        shortest = -1;
        for (i = 0; i < n; i++) {
            if (p[i].arrival_time <= current_time && p[i].remaining_time > 0) {
                if (shortest == -1 || p[i].remaining_time < p[shortest].remaining_time) {
                    shortest = i;
                }
            }
        }

        if (shortest == -1) {
            printf("CPU is idle for 1 unit of time.\n");
            current_time++;
            continue;
        }

        p[shortest].remaining_time--;
        current_time++;

        if (p[shortest].remaining_time == 0) {
            completed++;

            p[shortest].completion_time = current_time;
            p[shortest].turnaround_time = p[shortest].completion_time - p[shortest].arrival_time;
            p[shortest].waiting_time = p[shortest].turnaround_time - p[shortest].burst_time;

            total_waiting_time += p[shortest].waiting_time;
            total_turnaround_time += p[shortest].turnaround_time;
        }
    }

    printf("Process\tArrival Time\tBurst Time\tCompletion Time\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i+1, p[i].arrival_time, p[i].burst_time, p[i].completion_time, p[i].waiting_time, p[i].turnaround_time);
    }
    printf("Average Waiting Time = %.2f\n", total_waiting_time / n);
    printf("Average Turnaround Time = %.2f\n", total_turnaround_time / n);
}

int main() {
    struct process p[] = { {0, 5, 0, 0, 0, 0}, {1, 3, 0, 0, 0, 0}, {2, 3, 0, 0, 0, 0}, {4, 1, 0, 0, 0, 0} };
    int n = sizeof(p) / sizeof(struct process);

    SRPT(p, n);

    return 0;
}
